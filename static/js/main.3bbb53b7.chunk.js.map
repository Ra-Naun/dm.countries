{"version":3,"sources":["components/app/searchForm/CheckBox.js","components/app/body/SearchForm.js","actions/actionTypes.js","actions/utility.js","actions/ActionFactory.js","actions/CountriesCachActions.js","actions/searchedCountriesActions.js","utils/API_Fetch.js","containers/SearchFormContainer.js","components/Spinner.jsx","actions/favoriteCountriesActions.js","components/app/body/FavoriteIcon.js","selectors/selectors.js","containers/FavoriteIconContainer.js","components/app/body/CountryShortInfo.js","containers/CountryShortInfoContainer.js","components/app/body/mainContent/CountryInformation.js","actions/selectedCountryActions.js","containers/CountryInformationContainer.js","components/app/body/mainContent/SearchResults.js","containers/SearchResultsContainer.js","components/app/body/MainContent.js","components/app/body/MyFavorites.js","containers/MyFavoritesContainer.js","containers/MainContentContainer.js","components/app/Body.js","assets/imgs/logo.svg","components/app/Header.js","components/ErrorBoundary.jsx","components/App.js","reportWebVitals.js","reducers/selectedCountry.js","reducers/searchedCountries.js","reducers/favoriteCountries.js","reducers/countriesCache.js","reducers/index.js","store/configureStore.js","index.js"],"names":["CheckBox","isChecked","filterID","title","toggleChecked","className","checked","onChange","type","name","SearchForm","search","classes","role","useState","searchText","setSearchText","isError","setIsError","byName","byCode","filters","setFilters","filter","useEffect","cogoToast","warn","action","id","placeholder","value","aria-label","e","countryName","target","test","length","onClick","preventDefault","error","COUNTRIES_REQUEST","COUNTRIES_SUCCESS","COUNTRIES_FAIL","CLEAR_RESULTS","SET_SELECTED_COUNTRY","RESET_SELECTED_COUNTRY","PUSH_FAVORITE_COUNTRY","REMOVE_FAVORITE_COUNTRY","UPDATE_CACHE","fetchContries","URL","requestText","a","fetch","responseJSON","json","countries","status","Error","message","console","log","getOnlyUniqCountries","uniqCountries","forEach","country","code","alpha3Code","isUniq","uniqCountry","push","getStructuredListOfCountries","structuredCountries","structuredCountry","flag","languages","border_countries","borders","getSortedListOfCountries","sortedCountries","sort","b","ActionsFactory","payload","dispatch","updateCoutriesCach","LoadCountriesRequest","LoadCountriesSuccess","LoadCountriesFail","clearResults","loadContries","countriesByCode","countriesByName","connect","onlyCodes","searchCountries","Spinner","pushFavCountryByCode","removeFavCountryByCode","FavoriteIcon","pushToFavorite","removeFromFavorite","isFavorite","window","confirm","getCountryByCode","state","cachedCountry","countriesCache","needLoaded","getSelectedCountry","selectedCountry","map","border","getFavCountries","favCountriesOnlyCode","favoriteCountries","favCountries","call","CountryFullInfo","searchedCountries","countryCodes","isExist","shouldComponentUpdate","CountryShortInfo","lazzyLoadByCode","setSelectedCountryByCode","index","clearSearchResults","isClearSearchResults","templateonLoadedCountry","height","src","alt","newContries","CountryInformation","resetSelectedCountry","template_country","lang","key","SearchResults","isFetching","templateCountries","templateError","templateFetching","renderTemplate","MainContent","MyFavorites","isLoadedFavContries","setIsLoadedFavContries","cachedFavContries","localStorage","getItem","split","parseCountry","JSON","parse","OnlyCodeFavContries","stringify","setItem","templateNoData","isVisibleCountryInformation","isVisibleSearchResults","Body","Header","logo","ErrorBoundary","props","hasError","errorInfo","this","children","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","oldCache","newCountries","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bbb53b7.chunk.js","sourcesContent":["import './checkBox.scss';\r\n\r\nconst CheckBox = ({ isChecked, filterID, title, toggleChecked }) => {\r\n  const changeChecked = () => toggleChecked(filterID);\r\n\r\n  return (\r\n    <label className='label-for-checkbox'>\r\n      <input checked={isChecked} onChange={changeChecked} type='checkbox' className='checkbox' name='checkbox' />\r\n      <span className='checkbox__style'></span>\r\n      <p className='checkbox__title'>{title}</p>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport cogoToast from 'cogo-toast';\r\nimport './searchForm.scss';\r\nimport CheckBox from '../searchForm/CheckBox';\r\n\r\nconst SearchForm = ({ search, classes, role }) => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [isError, setIsError] = useState(false);\r\n  const [filters, setFilters] = useState({\r\n    byName: true,\r\n    byCode: true,\r\n  });\r\n\r\n  const searchhBtnClick = (e) => {\r\n    e.preventDefault();\r\n    if (!isError && searchText.length > 0) search(searchText, filters);\r\n    else cogoToast.error('Введите коректное название');\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    const countryName = e.target.value;\r\n    setSearchText(countryName);\r\n    const reg = /^[a-zA-Z]+$/;\r\n    if (reg.test(countryName) || countryName.length === 0) setIsError(false);\r\n    else setIsError(true);\r\n  };\r\n\r\n  const toggleChecked = (filter) => {\r\n    setFilters({\r\n      ...filters,\r\n      [filter]: !filters[filter],\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    isError && cogoToast.warn('Только общепринятое англофицированное название');\r\n  }, [isError]);\r\n\r\n  return (\r\n    <form action='' className={'search-form ' + classes}>\r\n      <div className='search-form__request'>\r\n        <input\r\n          className={`search-form__input ${isError && 'isError'}`}\r\n          type='search'\r\n          id='search-country'\r\n          name='q'\r\n          placeholder={role}\r\n          value={searchText}\r\n          aria-label={role}\r\n          onChange={handleOnChange}\r\n        ></input>\r\n        <button className='search-form__search-btn' title='search...' onClick={searchhBtnClick}></button>\r\n      </div>\r\n\r\n      <div className='search-form__checkboxes'>\r\n        <CheckBox isChecked={filters.byName} filterID='byName' toggleChecked={toggleChecked} title='By name' />\r\n        <CheckBox isChecked={filters.byCode} filterID='byCode' toggleChecked={toggleChecked} title='By code' />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","export const COUNTRIES_REQUEST = '@@SearchedCountries/COUNTRIES_REQUEST';\r\nexport const COUNTRIES_SUCCESS = '@@SearchedCountries/COUNTRIES_SUCCESS';\r\nexport const COUNTRIES_FAIL = '@@SearchedCountries/COUNTRIES_FAIL';\r\nexport const SET_FILTERS = '@@SearchedCountries/SET_FILTERS';\r\nexport const CLEAR_RESULTS = '@@SearchedCountries/CLEAR_RESULTS';\r\n\r\nexport const SET_SELECTED_COUNTRY = '@@selectedCountry/SET_SELECTED_COUNTRY';\r\nexport const RESET_SELECTED_COUNTRY = '@@selectedCountry/RESET_SELECTED_COUNTRY';\r\n\r\nexport const PUSH_FAVORITE_COUNTRY = '@@FavoriteCountries/PUSH_FAVORITE_COUNTRY';\r\nexport const REMOVE_FAVORITE_COUNTRY = '@@FavoriteCountries/REMOVE_FAVORITE_COUNTRY';\r\n\r\nexport const UPDATE_CACHE = '@@CountriesCach/UPDATE_CACHE';\r\n","export const fetchContries = async (URL, requestText) => {\r\n  try {\r\n    const responseJSON = await fetch(`${URL}${requestText}`);\r\n    const countries = await responseJSON.json();\r\n\r\n    if (countries.status === 400 || countries.status === 404) throw new Error(countries.message);\r\n    return [countries];\r\n  } catch (err) {\r\n    console.log('error: ', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getOnlyUniqCountries = (countries) => {\r\n  const uniqCountries = [];\r\n  countries.forEach((country) => {\r\n    const code = country.alpha3Code || country.code;\r\n    let isUniq = true;\r\n    uniqCountries.forEach((uniqCountry) => {\r\n      if ((uniqCountry.alpha3Code || uniqCountry.code) === code) {\r\n        isUniq = false;\r\n      }\r\n    });\r\n    if (isUniq) uniqCountries.push(country);\r\n  });\r\n\r\n  return uniqCountries;\r\n};\r\n\r\nexport const getStructuredListOfCountries = (countries) => {\r\n  const structuredCountries = [];\r\n  countries.forEach((country) => {\r\n    const structuredCountry = {\r\n      code: country.alpha3Code || country.code,\r\n      name: country.name,\r\n      flag: country.flag,\r\n      languages: country.languages,\r\n      border_countries: country.borders,\r\n    };\r\n    structuredCountries.push(structuredCountry);\r\n  });\r\n\r\n  return structuredCountries;\r\n};\r\n\r\nexport const getSortedListOfCountries = (countries) => {\r\n  const sortedCountries = [...countries];\r\n  sortedCountries.sort((a, b) => {\r\n    if (a.name > b.name) return 1;\r\n    if (a.name < b.name) return -1;\r\n    else return 0;\r\n  });\r\n\r\n  return sortedCountries;\r\n};\r\n","const ActionsFactory = (type) => (payload) => (dispatch) => dispatch({ type, payload });\r\n\r\nexport default ActionsFactory;\r\n","import { UPDATE_CACHE } from './actionTypes';\r\nimport ActionsFactory from './ActionFactory';\r\nimport { loadContries } from './searchedCountriesActions';\r\n\r\nexport const updateCoutriesCach = ActionsFactory(UPDATE_CACHE);\r\n\r\nexport const lazzyLoadByCode = (code) => {\r\n  return async (dispatch) => {\r\n    const filters = {\r\n      byName: false,\r\n      byCode: true,\r\n    };\r\n\r\n    const newContries = await loadContries(code, filters);\r\n    dispatch(updateCoutriesCach(newContries));\r\n  };\r\n};\r\n","import { COUNTRIES_REQUEST, COUNTRIES_SUCCESS, COUNTRIES_FAIL, SET_FILTERS, CLEAR_RESULTS } from './actionTypes';\r\nimport { fetchContries, getOnlyUniqCountries, getStructuredListOfCountries, getSortedListOfCountries } from './utility';\r\nimport { URLByCode, URLByName } from '../utils/API_Fetch';\r\nimport ActionsFactory from './ActionFactory';\r\nimport { updateCoutriesCach } from './CountriesCachActions';\r\n\r\nconst LoadCountriesRequest = ActionsFactory(COUNTRIES_REQUEST);\r\nexport const LoadCountriesSuccess = ActionsFactory(COUNTRIES_SUCCESS);\r\nconst LoadCountriesFail = ActionsFactory(COUNTRIES_FAIL);\r\nexport const setFilters = ActionsFactory(SET_FILTERS);\r\nexport const clearResults = ActionsFactory(CLEAR_RESULTS);\r\n\r\nexport const searchCountries = (requestText, filters) => {\r\n  return async (dispatch) => {\r\n    dispatch(LoadCountriesRequest());\r\n\r\n    const countries = await loadContries(requestText, filters);\r\n\r\n    if (countries.length > 0) {\r\n      dispatch(updateCoutriesCach(countries));\r\n\r\n      let onlyCodes = [];\r\n      countries.forEach((country) => {\r\n        onlyCodes.push({ code: country.code });\r\n      });\r\n\r\n      dispatch(LoadCountriesSuccess(onlyCodes));\r\n    } else dispatch(LoadCountriesFail('Не удалось ничего найти...'));\r\n  };\r\n};\r\n\r\nexport const loadContries = async (requestText, filters) => {\r\n  let countries = [];\r\n\r\n  const countriesByCode = filters.byCode && (await fetchContries(URLByCode, requestText));\r\n  countries = [...countries, ...(countriesByCode || [])];\r\n\r\n  const countriesByName = filters.byName && (await fetchContries(URLByName, requestText));\r\n  countries = [...countries, ...(countriesByName[0] || [])];\r\n\r\n  countries = getOnlyUniqCountries(countries);\r\n\r\n  countries = getStructuredListOfCountries(countries);\r\n\r\n  countries = getSortedListOfCountries(countries);\r\n  return countries;\r\n};\r\n","export const URLByCode = 'https://restcountries.eu/rest/v2/alpha/';\r\n\r\nexport const URLByName = 'https://restcountries.eu/rest/v2/name/';\r\n","import { connect } from 'react-redux';\r\nimport SearchForm from '../components/app/body/SearchForm';\r\nimport { searchCountries } from '../actions/searchedCountriesActions';\r\n\r\nconst SearchFormContainer = ({ search }) => {\r\n  return <SearchForm search={search} classes={'search-countries'} role={'Search countries'} />;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  search: (requestText, filters) => dispatch(searchCountries(requestText, filters)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchFormContainer);\r\n","import React from \"react\";\r\nimport \"./spinner.css\";\r\n\r\nconst Spinner = () => <div className=\"spinner\" />;\r\n\r\nexport default Spinner;\r\n","import { PUSH_FAVORITE_COUNTRY, REMOVE_FAVORITE_COUNTRY } from './actionTypes';\r\nimport ActionsFactory from './ActionFactory';\r\n\r\nexport const pushFavCountryByCode = ActionsFactory(PUSH_FAVORITE_COUNTRY);\r\n\r\nexport const removeFavCountryByCode = ActionsFactory(REMOVE_FAVORITE_COUNTRY);\r\n","import './favoriteIcon.scss';\r\n\r\nconst FavoriteIcon = ({ code, pushToFavorite, removeFromFavorite, isFavorite }) => {\r\n  const favClick = () => {\r\n    if (isFavorite(code)) {\r\n      const isRemove = window.confirm('Удалить страну из сохранённых?');\r\n      if (isRemove) removeFromFavorite(code);\r\n    } else pushToFavorite(code);\r\n  };\r\n\r\n  return (\r\n    <div className={`favorite-icon ${isFavorite(code) && 'active'}`} onClick={favClick}>\r\n      {isFavorite(code) ? '★' : '☆'}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FavoriteIcon;\r\n","export function getCountryByCode(state, code) {\r\n  const cachedCountry = state.countriesCache.filter((country) => country.code === code)[0];\r\n\r\n  if (cachedCountry) return cachedCountry;\r\n\r\n  return { code, needLoaded: true };\r\n}\r\n\r\nexport function getSelectedCountry(state) {\r\n  const { code } = state.selectedCountry;\r\n  const isExist = code ? true : false;\r\n  if (isExist) {\r\n    const country = getCountryByCode(state, code);\r\n\r\n    const borders = country.border_countries.map((border) => {\r\n      return getCountryByCode(state, border.code || border);\r\n    });\r\n\r\n    country.border_countries = borders;\r\n    return country;\r\n  } else return null;\r\n}\r\n\r\nexport function getFavCountries(state) {\r\n  const favCountriesOnlyCode = state.favoriteCountries;\r\n  const favCountries = [];\r\n\r\n  [].forEach.call(favCountriesOnlyCode, (country) => {\r\n    const isExist = country.code ? true : false;\r\n    if (isExist) {\r\n      const CountryFullInfo = getCountryByCode(state, country.code);\r\n      favCountries.push(CountryFullInfo);\r\n    }\r\n  });\r\n\r\n  return favCountries;\r\n}\r\nexport function searchedCountries(state) {\r\n  const countryCodes = state.searchedCountries.countries;\r\n  const countries = { ...state.searchedCountries };\r\n  countries.countries = countryCodes.map((country) => getCountryByCode(state, country.code));\r\n  return countries;\r\n}\r\n\r\nexport function isFavorite(state, code) {\r\n  let isExist = false;\r\n  state.favoriteCountries.forEach((country) => {\r\n    if (country.code === code) isExist = true;\r\n  });\r\n  return isExist;\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { pushFavCountryByCode, removeFavCountryByCode } from '../actions/favoriteCountriesActions';\r\nimport FavoriteIcon from '../components/app/body/FavoriteIcon';\r\nimport { isFavorite } from '../selectors/selectors';\r\n\r\nconst FavoriteIconContainer = ({ pushToFavorite, removeFromFavorite, isFavorite, code }) => {\r\n  return <FavoriteIcon code={code} pushToFavorite={pushToFavorite} removeFromFavorite={removeFromFavorite} isFavorite={isFavorite} />;\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  return {\r\n    isFavorite: ((state) => (code) => isFavorite(state, code))(state),\r\n    shouldComponentUpdate: state.favoriteCountries,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  pushToFavorite: (code) => dispatch(pushFavCountryByCode(code)),\r\n  removeFromFavorite: (code) => dispatch(removeFavCountryByCode(code)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteIconContainer);\r\n","import './countryShortInfo.scss';\r\nimport Spinner from '../../Spinner.jsx';\r\nimport FavoriteIconContainer from '../../../containers/FavoriteIconContainer';\r\n\r\nconst CountryShortInfo = ({ lazzyLoadByCode, country, setSelectedCountryByCode, index, clearSearchResults, isClearSearchResults = false }) => {\r\n  const { flag, name, code, needLoaded } = country;\r\n\r\n  const onClick = () => {\r\n    setSelectedCountryByCode(code);\r\n    if (isClearSearchResults) {\r\n      clearSearchResults();\r\n    }\r\n  };\r\n\r\n  if (needLoaded) {\r\n    lazzyLoadByCode(code);\r\n  }\r\n\r\n  const templateonLoadedCountry = (\r\n    <li className='country-short-info'>\r\n      <div className='country-short-info__wrapper'>\r\n        <div className='country-short-info__wrapper' onClick={onClick}>\r\n          <p className='country-short-info__num'>➣ {index + 1}</p>\r\n          <img height='15px' className='country-short-info__flag' src={flag} alt='flag' />\r\n          <p className='country-short-info__name'>{name}</p>\r\n        </div>\r\n        <div className='country-short-info__favorite'>\r\n          <FavoriteIconContainer code={code} />\r\n        </div>\r\n      </div>\r\n      <hr className='short-country-hr' />\r\n    </li>\r\n  );\r\n\r\n  const template_LoadingCountry = (\r\n    <li className='country-short-info'>\r\n      <div className='country-short-info__wrapper'>\r\n        <p className='country-short-info__num'>➣ {index + 1}</p>\r\n        <p className='country-short-info__name'>{code}</p>\r\n        <Spinner />\r\n      </div>\r\n      <hr className='short-country-hr' />\r\n    </li>\r\n  );\r\n\r\n  return needLoaded ? template_LoadingCountry : templateonLoadedCountry;\r\n};\r\n\r\nexport default CountryShortInfo;\r\n","import { connect } from 'react-redux';\r\nimport { lazzyLoadByCode } from '../actions/CountriesCachActions';\r\nimport { clearResults } from '../actions/searchedCountriesActions';\r\nimport CountryShortInfo from '../components/app/body/CountryShortInfo';\r\n\r\nconst CountryShortInfoContainer = ({ lazzyLoadByCode, country, setSelectedCountryByCode, index, clearSearchResults, isClearSearchResults }) => {\r\n  return (\r\n    <CountryShortInfo\r\n      lazzyLoadByCode={lazzyLoadByCode}\r\n      country={country}\r\n      setSelectedCountryByCode={setSelectedCountryByCode}\r\n      index={index}\r\n      clearSearchResults={clearSearchResults}\r\n      isClearSearchResults={isClearSearchResults}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  lazzyLoadByCode: (code) => dispatch(lazzyLoadByCode(code)),\r\n  clearSearchResults: () => dispatch(clearResults()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CountryShortInfoContainer);\r\n","import './countryInformation.scss';\r\nimport CountryShortInfoContainer from '../../../../containers/CountryShortInfoContainer';\r\nimport FavoriteIconContainer from '../../../../containers/FavoriteIconContainer';\r\n\r\nconst CountryInformation = ({ selectedCountry, setSelectedCountryByCode, resetSelectedCountry }) => {\r\n  const { flag, name, code, languages, border_countries } = selectedCountry;\r\n  const template_country = (\r\n    <>\r\n      <img height='15px' className='country-information__flag' src={flag} alt='flag' />\r\n      <p className='country-information__name'>{name}</p>\r\n      <p className='country-information__code'>{`ISO 3166-1 alpha-3:  ${code}`}</p>\r\n\r\n      <ol className='country-information__languages'>\r\n        <p className='country-information__languages-title'>Языки:</p>\r\n        {languages.map((lang) => (\r\n          <li key={lang.name} className='country-information__lang'>\r\n            {`• ${lang.name}`}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n\r\n      <details className='border-countries'>\r\n        <summary className='border-countries__summary'>Cписок граничных стран {`[${border_countries.length}]`}</summary>\r\n        <ol className='border-countries_list'>\r\n          {border_countries.map((country, index) => {\r\n            const key = country.name || country.code;\r\n            return <CountryShortInfoContainer key={key} country={country} index={index} setSelectedCountryByCode={setSelectedCountryByCode} isClearSearchResults={true} />;\r\n          })}\r\n        </ol>\r\n      </details>\r\n\r\n      <div className='country-information__favorite'>\r\n        <FavoriteIconContainer code={code} />\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className='country-information'>\r\n      <p className='country-information__title title'>🔭 Country information:</p>\r\n      {template_country}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInformation;\r\n","import { SET_SELECTED_COUNTRY, RESET_SELECTED_COUNTRY } from './actionTypes';\r\nimport ActionsFactory from './ActionFactory';\r\n\r\nexport const setSelectedCountryByCode = ActionsFactory(SET_SELECTED_COUNTRY);\r\n\r\nexport const resetSelectedCountry = ActionsFactory(RESET_SELECTED_COUNTRY);\r\n","import { connect } from 'react-redux';\r\nimport CountryInformation from '../components/app/body/mainContent/CountryInformation';\r\nimport { setSelectedCountryByCode, resetSelectedCountry } from '../actions/selectedCountryActions';\r\nimport { getSelectedCountry } from '../selectors/selectors';\r\n\r\nconst CountryInformationContainer = ({ selectedCountry, setSelectedCountryByCode, resetSelectedCountry, shouldComponentUpdate }) => {\r\n  let isVisible = selectedCountry?.code ? true : false;\r\n\r\n  return isVisible && <CountryInformation selectedCountry={selectedCountry} setSelectedCountryByCode={setSelectedCountryByCode} resetSelectedCountry={resetSelectedCountry} />;\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  return {\r\n    selectedCountry: getSelectedCountry(state),\r\n    shouldComponentUpdate: state.countriesCache,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSelectedCountryByCode: (code) => dispatch(setSelectedCountryByCode(code)),\r\n  resetSelectedCountry: () => dispatch(resetSelectedCountry()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountryInformationContainer);\r\n","import './searchResults.scss';\r\nimport Spinner from '../../../Spinner';\r\nimport CountryShortInfoContainer from '../../../../containers/CountryShortInfoContainer';\r\nimport { useEffect } from 'react';\r\n\r\nconst SearchResults = ({ searchedCountries, setSelectedCountryByCode, resetSelectedCountry, clearSearchResults }) => {\r\n  const { isFetching, error, countries } = searchedCountries;\r\n\r\n  useEffect(() => {\r\n    if (countries.length !== 1) resetSelectedCountry();\r\n  }, [isFetching]);\r\n\r\n  const templateCountries = (\r\n    <ol className='search-results__countries'>\r\n      {countries.map((country, index) => (\r\n        <CountryShortInfoContainer key={country.code} country={country} index={index} setSelectedCountryByCode={setSelectedCountryByCode} />\r\n      ))}\r\n    </ol>\r\n  );\r\n\r\n  const templateError = (\r\n    <div className='search-results__wrapper-error'>\r\n      <p className='search-results__error'>{error}</p>\r\n    </div>\r\n  );\r\n\r\n  const templateFetching = (\r\n    <>\r\n      <div className='search-results__fetching'>\r\n        <Spinner />\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const renderTemplate = isFetching ? templateFetching : error ? templateError : templateCountries;\r\n\r\n  if (countries.length === 1) {\r\n    setSelectedCountryByCode(countries[0].code);\r\n    clearSearchResults();\r\n  }\r\n\r\n  return (\r\n    <div className='search-results'>\r\n      <p className='search-results__title title'>🔎 Search results {'[' + countries.length + ']'}:</p>\r\n\r\n      {renderTemplate}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import { connect } from 'react-redux';\r\nimport SearchResults from '../components/app/body/mainContent/SearchResults';\r\nimport { setSelectedCountryByCode, resetSelectedCountry } from '../actions/selectedCountryActions';\r\nimport { searchedCountries } from '../selectors/selectors';\r\nimport { clearResults } from '../actions/searchedCountriesActions';\r\nimport { useEffect } from 'react';\r\n\r\nconst SearchResultsContainer = ({ searchedCountries, setSelectedCountryByCode, resetSelectedCountry, clearSearchResults }) => {\r\n  const { isFetching, error, countries } = searchedCountries;\r\n  let showSearchResults = countries.length || error || isFetching;\r\n\r\n  return (\r\n    showSearchResults && (\r\n      <SearchResults searchedCountries={searchedCountries} setSelectedCountryByCode={setSelectedCountryByCode} resetSelectedCountry={resetSelectedCountry} clearSearchResults={clearSearchResults} />\r\n    )\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  return {\r\n    searchedCountries: searchedCountries(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSelectedCountryByCode: (code) => dispatch(setSelectedCountryByCode(code)),\r\n  resetSelectedCountry: () => dispatch(resetSelectedCountry()),\r\n  clearSearchResults: () => dispatch(clearResults()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResultsContainer);\r\n","import CountryInformationContainer from '../../../containers/CountryInformationContainer';\r\nimport './mainContent.scss';\r\nimport SearchResultsContainer from '../../../containers/SearchResultsContainer';\r\n\r\nconst MainContent = () => {\r\n  return (\r\n    <div className='main-content'>\r\n      <p className='main-content__title title'>Main content:</p>\r\n      <CountryInformationContainer />\r\n      <SearchResultsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","import { useEffect, useState } from 'react';\r\nimport CountryShortInfoContainer from '../../../containers/CountryShortInfoContainer';\r\nimport './myFavorites.scss';\r\n\r\nconst MyFavorites = ({ favCountries, setSelectedCountryByCode, pushToFavorite, removeFromFavorite, isFavorite }) => {\r\n  const [isLoadedFavContries, setIsLoadedFavContries] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const cachedFavContries = localStorage.getItem('favCountries')?.split(',') || [];\r\n    const isEmpty = cachedFavContries[0]?.length === 0;\r\n    if (!isEmpty) {\r\n      cachedFavContries.forEach((country) => {\r\n        const parseCountry = JSON.parse(country);\r\n        if (!isFavorite(parseCountry.code)) pushToFavorite(parseCountry.code);\r\n      });\r\n    }\r\n    setIsLoadedFavContries(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const OnlyCodeFavContries = favCountries.map((country) => {\r\n      return JSON.stringify({ code: country.code });\r\n    });\r\n\r\n    if (isLoadedFavContries) localStorage.setItem('favCountries', OnlyCodeFavContries || []);\r\n  }, [favCountries]);\r\n\r\n  const templateCountries = (\r\n    <ol className='favorite-countries_list'>\r\n      {favCountries.map((country, index) => {\r\n        const key = country.name || country.code;\r\n        return <CountryShortInfoContainer key={key} country={country} index={index} setSelectedCountryByCode={setSelectedCountryByCode} isClearSearchResults={true} />;\r\n      })}\r\n    </ol>\r\n  );\r\n\r\n  const templateNoData = (\r\n    <div className='my-favorites__nodata'>\r\n      <p className='my-favorites__message'>Вы еще не добавили ни одну страну...</p>\r\n    </div>\r\n  );\r\n\r\n  const renderTemplate = favCountries.length ? templateCountries : templateNoData;\r\n\r\n  return (\r\n    <div className='my-favorites'>\r\n      <p className='my-favorites__title title'>★ My favorites:</p>\r\n      {renderTemplate}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyFavorites;\r\n","import { connect } from 'react-redux';\r\nimport MyFavorites from '../components/app/body/MyFavorites';\r\nimport { setSelectedCountryByCode } from '../actions/selectedCountryActions';\r\nimport { pushFavCountryByCode, removeFavCountryByCode } from '../actions/favoriteCountriesActions';\r\nimport { getFavCountries, isFavorite } from '../selectors/selectors';\r\n\r\nconst MyFavoritesContainer = ({ favCountries, setSelectedCountryByCode, pushToFavorite, removeFromFavorite, isFavorite, shouldComponentUpdate }) => {\r\n  return (\r\n    <MyFavorites favCountries={favCountries} setSelectedCountryByCode={setSelectedCountryByCode} pushToFavorite={pushToFavorite} removeFromFavorite={removeFromFavorite} isFavorite={isFavorite} />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  return {\r\n    isFavorite: ((state) => (code) => isFavorite(state, code))(state),\r\n    favCountries: getFavCountries(state),\r\n    shouldComponentUpdate: state.favoriteCountries,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSelectedCountryByCode: (code) => dispatch(setSelectedCountryByCode(code)),\r\n  pushToFavorite: (code) => dispatch(pushFavCountryByCode(code)),\r\n  removeFromFavorite: (code) => dispatch(removeFavCountryByCode(code)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyFavoritesContainer);\r\n","import { connect } from 'react-redux';\r\nimport MainContent from '../components/app/body/MainContent';\r\n\r\nconst MainContentContainer = ({ isVisibleCountryInformation, isVisibleSearchResults }) => {\r\n  let isVisible = isVisibleCountryInformation || isVisibleSearchResults;\r\n\r\n  return isVisible && <MainContent />;\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  const { isFetching, error, countries } = state.searchedCountries;\r\n  return {\r\n    isVisibleCountryInformation: state.selectedCountry.code ? true : false,\r\n    isVisibleSearchResults: countries.length > 0 || error || isFetching,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(MainContentContainer);\r\n","import SearchFormContainer from '../../containers/SearchFormContainer';\r\nimport MainContent from './body/MainContent';\r\nimport './body.scss';\r\nimport MyFavoritesContainer from '../../containers/MyFavoritesContainer';\r\nimport MainContentContainer from '../../containers/MainContentContainer';\r\n\r\nconst Body = () => {\r\n  return (\r\n    <main className='body container'>\r\n      <div className='search-block'>\r\n        <SearchFormContainer />\r\n        <MainContentContainer />\r\n      </div>\r\n      <MyFavoritesContainer />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from '../../assets/imgs/logo.svg';\r\nimport './header.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className='app__header'>\r\n      <img className='app__logo' src={logo} alt='logo' />\r\n      <p className='app__title title'>Search countries</p>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Обновить состояние с тем, чтобы следующий рендер показал запасной UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // Можно также сохранить информацию об ошибке в соответствующую службу журнала ошибок\r\n        console.log(errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // Можно отрендерить запасной UI произвольного вида\r\n            return <h1>Что-то пошло не так.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n","import './App.scss';\r\nimport Body from './app/Body';\r\nimport Header from './app/Header';\r\nimport ErrorBoundary from './ErrorBoundary.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <div className='app'>\r\n        <Header />\r\n        <Body />\r\n      </div>{' '}\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { SET_SELECTED_COUNTRY, RESET_SELECTED_COUNTRY } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  code: null,\r\n};\r\n\r\nexport const selectedCountryReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SELECTED_COUNTRY:\r\n      return { code: action.payload };\r\n    case RESET_SELECTED_COUNTRY:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { COUNTRIES_REQUEST, COUNTRIES_SUCCESS, COUNTRIES_FAIL, CLEAR_RESULTS } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  countries: [],\r\n  isFetching: false,\r\n  error: '',\r\n};\r\n\r\n// __country_structure__ = {\r\n//   code: char(3),\r\n// };\r\n\r\nexport const searchedCountriesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case COUNTRIES_REQUEST:\r\n      return { ...state, isFetching: true };\r\n    case COUNTRIES_SUCCESS:\r\n      return { ...state, countries: action.payload, isFetching: false, error: '' };\r\n    case COUNTRIES_FAIL:\r\n      return { ...state, countries: [], isFetching: false, error: action.payload };\r\n    case CLEAR_RESULTS:\r\n      return { ...state, countries: [], isFetching: false, error: '' };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { PUSH_FAVORITE_COUNTRY, REMOVE_FAVORITE_COUNTRY } from '../actions/actionTypes';\r\n\r\nconst initialState = [];\r\n\r\n// __country_structure__ = {\r\n//   code: char(3),\r\n// };\r\n\r\nexport const favoriteCountriesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case PUSH_FAVORITE_COUNTRY:\r\n      return [...state, { code: action.payload }];\r\n    case REMOVE_FAVORITE_COUNTRY:\r\n      return state.filter((country) => country.code !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { UPDATE_CACHE } from '../actions/actionTypes';\r\nimport { getOnlyUniqCountries } from '../actions/utility';\r\n\r\nconst initialState = [];\r\n\r\n// __country_structure__ = {\r\n//   code: char(3),\r\n//   name: string,\r\n//   flag: img_src,\r\n//   languages: [string],\r\n//   border_countries: [code],\r\n// };\r\n\r\nexport const countriesCacheReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CACHE: {\r\n      const oldCache = state;\r\n      const newCountries = action.payload;\r\n      let countries = [...oldCache, ...newCountries];\r\n      countries = getOnlyUniqCountries(countries);\r\n      return [...countries];\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { selectedCountryReducer } from './selectedCountry';\r\nimport { searchedCountriesReducer } from './searchedCountries';\r\nimport { favoriteCountriesReducer } from './favoriteCountries';\r\nimport { countriesCacheReducer } from '././countriesCache';\r\n\r\nexport const rootReducer = combineReducers({\r\n  selectedCountry: selectedCountryReducer,\r\n  searchedCountries: searchedCountriesReducer,\r\n  favoriteCountries: favoriteCountriesReducer,\r\n  countriesCache: countriesCacheReducer,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { rootReducer } from '../reducers/index';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/configureStore';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}