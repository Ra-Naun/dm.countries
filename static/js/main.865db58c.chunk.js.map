{"version":3,"sources":["components/app/searchForm/CheckBox.js","components/app/body/SearchForm.js","actions/actionTypes.js","actions/utility.js","actions/ActionFactory.js","actions/CountriesCachActions.js","actions/searchedCountriesActions.js","containers/SearchFormContainer.js","components/Spinner.jsx","components/app/body/CountryShortInfo.js","containers/CountryShortInfoContainer.js","components/app/body/mainContent/CountryInformation.js","actions/selectedCountryActions.js","selectors/selectors.js","containers/CountryInformationContainer.js","components/app/body/mainContent/SearchResults.js","containers/SearchResultsContainer.js","components/app/body/MainContent.js","components/app/body/MyFavorites.js","components/app/Body.js","assets/imgs/logo.svg","components/app/Header.js","components/ErrorBoundary.jsx","components/App.js","reportWebVitals.js","reducers/selectedCountry.js","reducers/searchedCountries.js","reducers/favoriteCountries.js","reducers/countriesCache.js","reducers/index.js","store/configureStore.js","index.js"],"names":["CheckBox","isChecked","filterID","title","toggleChecked","className","checked","onChange","type","name","SearchForm","search","classes","role","useState","searchText","setSearchText","isError","setIsError","inputRef","useRef","byName","byCode","filters","setFilters","filter","useEffect","cogoToast","warn","action","classNames","ref","id","placeholder","value","aria-label","e","countryName","target","test","length","onClick","preventDefault","error","aria-hidden","COUNTRIES_REQUEST","COUNTRIES_SUCCESS","COUNTRIES_FAIL","SET_SELECTED_COUNTRY","RESET_SELECTED_COUNTRY","PUSH_FAVORITE_COUNTRY","REMOVE_FAVORITE_COUNTRY","UPDATE_CACHE","fetchContries","URL","requestText","a","fetch","responseJSON","json","countries","status","Error","message","console","log","getOnlyUniqCountries","uniqCountries","forEach","country","code","alpha3Code","isUniq","uniqCountry","push","getStructuredListOfCountries","structuredCountries","structuredCountry","flag","languages","border_countries","borders","getSortedListOfCountries","sortedCountries","sort","b","ActionsFactory","payload","dispatch","updateCoutriesCach","LoadCountriesRequest","LoadCountriesSuccess","LoadCountriesFail","loadContries","countriesByCode","countriesByName","connect","onlyCodes","searchCountries","Spinner","CountryShortInfo","lazzyLoadByCode","setSelectedCountryByCode","index","clearSearchResults","isClear","needLoaded","templateonLoad","height","src","alt","newContries","CountryInformation","selectedCountry","resetSelectedCountry","template_country","map","lang","key","getCountryByCode","state","cachedCountry","countriesCache","getSelectedCountry","border","searchedCountries","countryCodes","shouldComponentUpdate","SearchResults","isFetching","templateCountries","templateError","templateFetching","renderTemplate","MainContent","MyFavorites","Body","Header","logo","ErrorBoundary","props","hasError","errorInfo","this","children","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","favoriteCountries","countryCode","oldCache","newCountries","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.865db58c.chunk.js","sourcesContent":["import './checkBox.scss';\r\n\r\nconst CheckBox = ({ isChecked, filterID, title, toggleChecked }) => {\r\n  const changeChecked = () => toggleChecked(filterID);\r\n\r\n  return (\r\n    <label className='label-for-checkbox'>\r\n      <input checked={isChecked} onChange={changeChecked} type='checkbox' className='checkbox' name='checkbox' />\r\n      <span className='checkbox__style'></span>\r\n      <p className='checkbox__title'>{title}</p>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default CheckBox;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport cogoToast from 'cogo-toast';\r\nimport './searchForm.scss';\r\nimport CheckBox from '../searchForm/CheckBox';\r\n\r\nconst SearchForm = ({ search, classes, role }) => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [isError, setIsError] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const [filters, setFilters] = useState({\r\n    byName: true,\r\n    byCode: true,\r\n  });\r\n\r\n  const searchhBtnClick = (e) => {\r\n    e.preventDefault();\r\n    if (!isError && searchText.length > 0) search(searchText, filters);\r\n    else cogoToast.error('Введите коректное название');\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    const countryName = e.target.value;\r\n    setSearchText(countryName);\r\n    const reg = /^[a-zA-Z]+$/;\r\n    if (reg.test(countryName) || countryName.length === 0) setIsError(false);\r\n    else setIsError(true);\r\n  };\r\n\r\n  const toggleChecked = (filter) => {\r\n    setFilters({\r\n      ...filters,\r\n      [filter]: !filters[filter],\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    isError && cogoToast.warn('Только общепринятое англофицированное название');\r\n  }, [isError]);\r\n\r\n  return (\r\n    <form action='' className={'search-form ' + classes}>\r\n      <div className='wrapper'>\r\n        <input\r\n          className={`input ${classNames({ isError })}`}\r\n          ref={inputRef}\r\n          type='search'\r\n          id='search-country'\r\n          name='q'\r\n          placeholder={role}\r\n          value={searchText}\r\n          aria-label={role}\r\n          onChange={handleOnChange}\r\n        ></input>\r\n        <button className='SF-search-btn btn' title='search...' onClick={searchhBtnClick}>\r\n          <i className='fa fa-search' aria-hidden='true'></i>\r\n        </button>\r\n\r\n        <div className='search-form__checkboxes'>\r\n          <CheckBox isChecked={filters.byName} filterID='byName' toggleChecked={toggleChecked} title='By name' />\r\n          <CheckBox isChecked={filters.byCode} filterID='byCode' toggleChecked={toggleChecked} title='By code' />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","export const COUNTRIES_REQUEST = '@@SearchedCountries/COUNTRIES_REQUEST';\r\nexport const COUNTRIES_SUCCESS = '@@SearchedCountries/COUNTRIES_SUCCESS';\r\nexport const COUNTRIES_FAIL = '@@SearchedCountries/COUNTRIES_FAIL';\r\nexport const SET_FILTERS = '@@SearchedCountries/SET_FILTERS';\r\n\r\nexport const SET_SELECTED_COUNTRY = '@@selectedCountry/SET_SELECTED_COUNTRY';\r\nexport const RESET_SELECTED_COUNTRY = '@@selectedCountry/RESET_SELECTED_COUNTRY';\r\n\r\nexport const PUSH_FAVORITE_COUNTRY = '@@FavoriteCountries/PUSH_FAVORITE_COUNTRY';\r\nexport const REMOVE_FAVORITE_COUNTRY = '@@FavoriteCountries/REMOVE_FAVORITE_COUNTRY';\r\n\r\nexport const UPDATE_CACHE = '@@CountriesCach/UPDATE_CACHE';\r\n","export const fetchContries = async (URL, requestText) => {\r\n  try {\r\n    const responseJSON = await fetch(`${URL}${requestText}`);\r\n    const countries = await responseJSON.json();\r\n\r\n    if (countries.status === 400 || countries.status === 404) throw new Error(countries.message);\r\n    return [countries];\r\n  } catch (err) {\r\n    console.log('error: ', err);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getOnlyUniqCountries = (countries) => {\r\n  const uniqCountries = [];\r\n  countries.forEach((country) => {\r\n    const code = country.alpha3Code || country.code;\r\n    let isUniq = true;\r\n    uniqCountries.forEach((uniqCountry) => {\r\n      if ((uniqCountry.alpha3Code || uniqCountry.code) === code) {\r\n        isUniq = false;\r\n      }\r\n    });\r\n    if (isUniq) uniqCountries.push(country);\r\n  });\r\n\r\n  return uniqCountries;\r\n};\r\n\r\nexport const getStructuredListOfCountries = (countries) => {\r\n  const structuredCountries = [];\r\n  countries.forEach((country) => {\r\n    const structuredCountry = {\r\n      code: country.alpha3Code || country.code,\r\n      name: country.name,\r\n      flag: country.flag,\r\n      languages: country.languages,\r\n      border_countries: country.borders,\r\n    };\r\n    structuredCountries.push(structuredCountry);\r\n  });\r\n\r\n  return structuredCountries;\r\n};\r\n\r\nexport const getSortedListOfCountries = (countries) => {\r\n  const sortedCountries = [...countries];\r\n  sortedCountries.sort((a, b) => {\r\n    if (a.name > b.name) return 1;\r\n    if (a.name < b.name) return -1;\r\n    else return 0;\r\n  });\r\n\r\n  return sortedCountries;\r\n};\r\n","const ActionsFactory = (type) => (payload) => (dispatch) => dispatch({ type, payload });\r\n\r\nexport default ActionsFactory;\r\n","import { UPDATE_CACHE } from './actionTypes';\r\nimport ActionsFactory from './ActionFactory';\r\nimport { loadContries } from './searchedCountriesActions';\r\n\r\nexport const updateCoutriesCach = ActionsFactory(UPDATE_CACHE);\r\n\r\nexport const lazzyLoadByCode = (code) => {\r\n  return async (dispatch) => {\r\n    const filters = {\r\n      byName: false,\r\n      byCode: true,\r\n    };\r\n\r\n    const newContries = await loadContries(code, filters);\r\n    dispatch(updateCoutriesCach(newContries));\r\n  };\r\n};\r\n","import { COUNTRIES_REQUEST, COUNTRIES_SUCCESS, COUNTRIES_FAIL, SET_FILTERS } from './actionTypes';\r\nimport { fetchContries, getOnlyUniqCountries, getStructuredListOfCountries, getSortedListOfCountries } from './utility';\r\nimport ActionsFactory from './ActionFactory';\r\nimport { updateCoutriesCach } from './CountriesCachActions';\r\n\r\nconst LoadCountriesRequest = ActionsFactory(COUNTRIES_REQUEST);\r\nexport const LoadCountriesSuccess = ActionsFactory(COUNTRIES_SUCCESS);\r\nconst LoadCountriesFail = ActionsFactory(COUNTRIES_FAIL);\r\nexport const setFilters = ActionsFactory(SET_FILTERS);\r\n\r\nexport const searchCountries = (requestText, filters) => {\r\n  return async (dispatch) => {\r\n    dispatch(LoadCountriesRequest());\r\n\r\n    const countries = await loadContries(requestText, filters);\r\n\r\n    if (countries.length > 0) {\r\n      dispatch(updateCoutriesCach(countries));\r\n\r\n      let onlyCodes = [];\r\n      countries.forEach((country) => {\r\n        onlyCodes.push({ code: country.code });\r\n      });\r\n\r\n      dispatch(LoadCountriesSuccess(onlyCodes));\r\n    } else dispatch(LoadCountriesFail('Не удалось ничего найти...'));\r\n  };\r\n};\r\n\r\nexport const loadContries = async (requestText, filters) => {\r\n  let countries = [];\r\n\r\n  const URLByCode = 'https://restcountries.eu/rest/v2/alpha/';\r\n  const countriesByCode = filters.byCode && (await fetchContries(URLByCode, requestText));\r\n  countries = [...countries, ...(countriesByCode || [])];\r\n\r\n  const URLByName = 'https://restcountries.eu/rest/v2/name/';\r\n  const countriesByName = filters.byName && (await fetchContries(URLByName, requestText));\r\n  countries = [...countries, ...(countriesByName[0] || [])];\r\n\r\n  countries = getOnlyUniqCountries(countries);\r\n\r\n  countries = getStructuredListOfCountries(countries);\r\n\r\n  countries = getSortedListOfCountries(countries);\r\n  return countries;\r\n};\r\n","import { connect } from 'react-redux';\r\nimport SearchForm from '../components/app/body/SearchForm';\r\nimport { searchCountries } from '../actions/searchedCountriesActions';\r\n\r\nconst SearchFormContainer = ({ search }) => {\r\n  return <SearchForm search={search} classes={'search-countries'} role={'Search countries'} />;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  search: (requestText, filters) => dispatch(searchCountries(requestText, filters)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchFormContainer);\r\n","import React from \"react\";\r\nimport \"./spinner.css\";\r\n\r\nconst Spinner = () => <div className=\"spinner\" />;\r\n\r\nexport default Spinner;\r\n","import './countryShortInfo.scss';\r\nimport Spinner from '../../Spinner.jsx';\r\n\r\nconst CountryShortInfo = ({ lazzyLoadByCode, country, setSelectedCountryByCode, index, clearSearchResults, isClear = false }) => {\r\n  const { flag, name, code, needLoaded } = country;\r\n\r\n  const onClick = () => {\r\n    setSelectedCountryByCode(code);\r\n    if (isClear) {\r\n      console.log('||| isClear');\r\n      clearSearchResults();\r\n    }\r\n  };\r\n\r\n  if (needLoaded) {\r\n    lazzyLoadByCode(code);\r\n  }\r\n\r\n  const templateonLoad = (\r\n    <li className='country-short-info' onClick={onClick}>\r\n      <p className='country-short-info__num'>➣ {index + 1}</p>\r\n      <img height='15px' className='country-short-info__flag' src={flag} alt='flag' />\r\n      <p className='country-short-info__name'>{name}</p>\r\n    </li>\r\n  );\r\n\r\n  const template_LoadedCountry = (\r\n    <li className='country-short-info'>\r\n      <p className='country-short-info__num'>➣ {index + 1}</p>\r\n      <p className='country-short-info__name'>{code}</p>\r\n      <Spinner />\r\n    </li>\r\n  );\r\n\r\n  return needLoaded ? template_LoadedCountry : templateonLoad;\r\n};\r\n\r\nexport default CountryShortInfo;\r\n","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { lazzyLoadByCode } from '../actions/CountriesCachActions';\r\nimport { LoadCountriesSuccess } from '../actions/searchedCountriesActions';\r\nimport CountryShortInfo from '../components/app/body/CountryShortInfo';\r\n\r\nconst CountryShortInfoContainer = ({ lazzyLoadByCode, country, setSelectedCountryByCode, index, clearSearchResults, isClear }) => {\r\n  return (\r\n    <CountryShortInfo lazzyLoadByCode={lazzyLoadByCode} country={country} setSelectedCountryByCode={setSelectedCountryByCode} index={index} clearSearchResults={clearSearchResults} isClear={isClear} />\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  lazzyLoadByCode: (code) => dispatch(lazzyLoadByCode(code)),\r\n  clearSearchResults: () => dispatch(LoadCountriesSuccess([])),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CountryShortInfoContainer);\r\n","import './countryInformation.scss';\r\nimport CountryShortInfoContainer from '../../../../containers/CountryShortInfoContainer';\r\n\r\nconst CountryInformation = ({ selectedCountry, setSelectedCountryByCode, resetSelectedCountry }) => {\r\n  const { flag, name, code, languages, border_countries } = selectedCountry;\r\n  console.log('||| languages: ', languages);\r\n  const template_country = (\r\n    <>\r\n      <img height='15px' className='country-information__flag' src={flag} alt='flag' />\r\n      <p className='country-information__name'>{name}</p>\r\n      <p className='country-information__code'>{`ISO 3166-1 alpha-3:  ${code}`}</p>\r\n\r\n      <ol className='country-information__languages'>\r\n        Языки:\r\n        {languages.map((lang) => (\r\n          <li key={lang.name} className='country-information__lang'>\r\n            {`• ${lang.name}`}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n\r\n      <details className='border-countries'>\r\n        <summary className='border-countries__summary'>Cписок граничных стран {`[${border_countries.length}]`}</summary>\r\n        <ol className='border-countries_list'>\r\n          {border_countries.map((country, index) => {\r\n            const key = country.name || country.code;\r\n            return <CountryShortInfoContainer key={key} country={country} index={index} setSelectedCountryByCode={setSelectedCountryByCode} isClear={true} />;\r\n          })}\r\n        </ol>\r\n      </details>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className='country-information'>\r\n      <p className='country-information__title title'>Country information:</p>\r\n      {template_country}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInformation;\r\n","import { SET_SELECTED_COUNTRY, RESET_SELECTED_COUNTRY } from './actionTypes';\r\nimport ActionsFactory from './ActionFactory';\r\n\r\nexport const setSelectedCountryByCode = ActionsFactory(SET_SELECTED_COUNTRY);\r\n\r\nexport const resetSelectedCountry = ActionsFactory(RESET_SELECTED_COUNTRY);\r\n","import { fetchContries } from '../actions/utility';\r\n\r\nexport function getCountryByCode(state, code) {\r\n  const cachedCountry = state.countriesCache.filter((country) => country.code === code)[0];\r\n\r\n  if (cachedCountry) return cachedCountry;\r\n\r\n  return { code, needLoaded: true };\r\n}\r\n\r\nexport function getSelectedCountry(state) {\r\n  const { code } = state.selectedCountry;\r\n  const isExist = code ? true : false;\r\n  if (isExist) {\r\n    const country = getCountryByCode(state, code);\r\n\r\n    const borders = country.border_countries.map((border) => {\r\n      return getCountryByCode(state, border.code || border);\r\n    });\r\n\r\n    country.border_countries = borders;\r\n    return country;\r\n  } else return null;\r\n}\r\n\r\nexport function getFavCountries(state) {\r\n  const favCountriesOnlyCode = state.favoriteCountries;\r\n  const favCountries = [];\r\n\r\n  [].forEach.call(favCountriesOnlyCode, (code) => {\r\n    const isExist = code ? false : true;\r\n    if (isExist) {\r\n      const country = getCountryByCode(state, code);\r\n      favCountries.push(country);\r\n    }\r\n  });\r\n  return favCountries;\r\n}\r\nexport function searchedCountries(state) {\r\n  const countryCodes = state.searchedCountries.countries;\r\n  const countries = { ...state.searchedCountries };\r\n  countries.countries = countryCodes.map((country) => getCountryByCode(state, country.code));\r\n  return countries;\r\n}\r\n\r\nexport function isFavorite(state, code) {\r\n  const isExist = state.favoriteCountries.includes(code);\r\n  return isExist;\r\n  //don't add reselect!\r\n}\r\n","import { connect } from 'react-redux';\r\nimport CountryInformation from '../components/app/body/mainContent/CountryInformation';\r\nimport { setSelectedCountryByCode, resetSelectedCountry } from '../actions/selectedCountryActions';\r\nimport { getSelectedCountry } from '../selectors/selectors';\r\n\r\nconst CountryInformationContainer = ({ selectedCountry, setSelectedCountryByCode, resetSelectedCountry, shouldComponentUpdate }) => {\r\n  return selectedCountry?.code ? <CountryInformation selectedCountry={selectedCountry} setSelectedCountryByCode={setSelectedCountryByCode} resetSelectedCountry={resetSelectedCountry} /> : null;\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  return {\r\n    selectedCountry: getSelectedCountry(state),\r\n    shouldComponentUpdate: state.countriesCache,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSelectedCountryByCode: (code) => dispatch(setSelectedCountryByCode(code)),\r\n  resetSelectedCountry: () => dispatch(resetSelectedCountry()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountryInformationContainer);\r\n","import './searchResults.scss';\r\nimport Spinner from '../../../Spinner';\r\nimport CountryShortInfoContainer from '../../../../containers/CountryShortInfoContainer';\r\nimport { useEffect } from 'react';\r\n\r\nconst SearchResults = ({ searchedCountries, setSelectedCountryByCode, resetSelectedCountry, clearSearchResults }) => {\r\n  const { isFetching, error, countries } = searchedCountries;\r\n\r\n  useEffect(() => {\r\n    if (countries.length !== 1) resetSelectedCountry();\r\n  }, [isFetching]);\r\n\r\n  const templateCountries = (\r\n    <ol className='search-results__countries'>\r\n      {countries.map((country, index) => (\r\n        <CountryShortInfoContainer key={country.code} country={country} index={index} setSelectedCountryByCode={setSelectedCountryByCode} />\r\n      ))}\r\n    </ol>\r\n  );\r\n\r\n  const templateError = (\r\n    <>\r\n      <p className='search-results__error'>{error}</p>\r\n    </>\r\n  );\r\n\r\n  const templateFetching = (\r\n    <>\r\n      <div className='search-results__fetching'>\r\n        <Spinner />\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const renderTemplate = isFetching ? templateFetching : error ? templateError : templateCountries;\r\n\r\n  if (countries.length === 1) {\r\n    setSelectedCountryByCode(countries[0].code);\r\n    clearSearchResults();\r\n  }\r\n\r\n  return (\r\n    <div className='search-results'>\r\n      <p className='search-results__title title'>Search results {'[' + countries.length + ']'}:</p>\r\n\r\n      {renderTemplate}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import { connect } from 'react-redux';\r\nimport SearchResults from '../components/app/body/mainContent/SearchResults';\r\nimport { setSelectedCountryByCode, resetSelectedCountry } from '../actions/selectedCountryActions';\r\nimport { searchedCountries } from '../selectors/selectors';\r\nimport { LoadCountriesSuccess } from '../actions/searchedCountriesActions';\r\n\r\nconst SearchResultsContainer = ({ searchedCountries, setSelectedCountryByCode, resetSelectedCountry, clearSearchResults }) => {\r\n  const { isFetching, error, countries } = searchedCountries;\r\n  const showSearchResults = countries.length || error || isFetching;\r\n\r\n  return (\r\n    showSearchResults && (\r\n      <SearchResults searchedCountries={searchedCountries} setSelectedCountryByCode={setSelectedCountryByCode} resetSelectedCountry={resetSelectedCountry} clearSearchResults={clearSearchResults} />\r\n    )\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  return {\r\n    searchedCountries: searchedCountries(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSelectedCountryByCode: (code) => dispatch(setSelectedCountryByCode(code)),\r\n  resetSelectedCountry: () => dispatch(resetSelectedCountry()),\r\n  clearSearchResults: () => dispatch(LoadCountriesSuccess([])),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResultsContainer);\r\n","import CountryInformationContainer from '../../../containers/CountryInformationContainer';\r\n\r\nimport './mainContent.scss';\r\nimport SearchResultsContainer from '../../../containers/SearchResultsContainer';\r\n\r\nconst MainContent = () => {\r\n  return (\r\n    <div className='main-content'>\r\n      <p className='main-content__title title'>Main content:</p>\r\n      <CountryInformationContainer />\r\n      <SearchResultsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","import './myFavorites.scss';\r\n\r\nconst MyFavorites = () => {\r\n  return (\r\n    <div className='my-favorites'>\r\n      <p className='my-favorites__title title'>My favorites:</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyFavorites;\r\n","import SearchFormContainer from '../../containers/SearchFormContainer';\r\nimport MainContent from './body/MainContent';\r\nimport './body.scss';\r\nimport MyFavorites from './body/MyFavorites';\r\n\r\nconst Body = () => {\r\n  return (\r\n    <main className='body container'>\r\n      <div className='search-block'>\r\n        <SearchFormContainer />\r\n        <MainContent />\r\n      </div>\r\n      <MyFavorites />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from '../../assets/imgs/logo.svg';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className='app__header'>\r\n      <img className='app__logo' src={logo} alt='logo' />\r\n      <p className='app__title title'>Search countries</p>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Обновить состояние с тем, чтобы следующий рендер показал запасной UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // Можно также сохранить информацию об ошибке в соответствующую службу журнала ошибок\r\n        console.log(errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // Можно отрендерить запасной UI произвольного вида\r\n            return <h1>Что-то пошло не так.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n","import './App.scss';\r\nimport Body from './app/Body';\r\nimport Header from './app/Header';\r\nimport ErrorBoundary from './ErrorBoundary.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <div className='app'>\r\n        <Header />\r\n        <Body />\r\n      </div>{' '}\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { SET_SELECTED_COUNTRY, RESET_SELECTED_COUNTRY } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  code: null,\r\n};\r\n\r\nexport const selectedCountryReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SELECTED_COUNTRY:\r\n      return { code: action.payload };\r\n    case RESET_SELECTED_COUNTRY:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { COUNTRIES_REQUEST, COUNTRIES_SUCCESS, COUNTRIES_FAIL } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  countries: [],\r\n  isFetching: false,\r\n  error: '',\r\n};\r\n\r\n// __country_structure__ = {\r\n//   code: char(3),\r\n// };\r\n\r\nexport const searchedCountriesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case COUNTRIES_REQUEST:\r\n      return { ...state, isFetching: true };\r\n    case COUNTRIES_SUCCESS:\r\n      return { ...state, countries: action.payload, isFetching: false, error: '' };\r\n    case COUNTRIES_FAIL:\r\n      return { ...state, countries: [], isFetching: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { PUSH_FAVORITE_COUNTRY, REMOVE_FAVORITE_COUNTRY } from '../actions/actionTypes';\r\n\r\nconst initialState = [];\r\n\r\nexport const favoriteCountriesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case PUSH_FAVORITE_COUNTRY:\r\n      return [...state, ...action.payload];\r\n    case REMOVE_FAVORITE_COUNTRY:\r\n      return state.filter((countryCode) => countryCode !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { UPDATE_CACHE } from '../actions/actionTypes';\r\nimport { getOnlyUniqCountries } from '../actions/utility';\r\n\r\nconst initialState = [];\r\n\r\n// __country_structure__ = {\r\n//   code: char(3),\r\n//   name: string,\r\n//   flag: img_src,\r\n//   languages: [string],\r\n//   border_countries: [code],\r\n// };\r\n\r\nexport const countriesCacheReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CACHE: {\r\n      const oldCache = state;\r\n      const newCountries = action.payload;\r\n      let countries = [...oldCache, ...newCountries];\r\n      countries = getOnlyUniqCountries(countries);\r\n      return [...countries];\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { selectedCountryReducer } from './selectedCountry';\r\nimport { searchedCountriesReducer } from './searchedCountries';\r\nimport { favoriteCountriesReducer } from './favoriteCountries';\r\nimport { countriesCacheReducer } from '././countriesCache';\r\n\r\nexport const rootReducer = combineReducers({\r\n  selectedCountry: selectedCountryReducer,\r\n  searchedCountries: searchedCountriesReducer,\r\n  favoriteCountries: favoriteCountriesReducer,\r\n  countriesCache: countriesCacheReducer,\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { rootReducer } from \"../reducers/index\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/configureStore';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}